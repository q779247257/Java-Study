<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
          id 和 name 可以同时存在,作为bean的标识
          class添加的应该是class的全路径
          scope：创建的对象是否为单例 prototype 是非单例 singleton 是单例(默认)
          init-method： 对象初始化方法
          destroy-method： 对象销毁方法
          lazy-init: 是否延迟加载 默认值为false
      -->
    <bean
            id="user" name="userName" class="domain.User" scope="singleton"
            init-method="intMethod"
            destroy-method="destroyMethod"
    />

    <!--
        静态工厂类获取对象Bean
        factory-method： 获取对象的方法
    -->
    <bean id="staticFactoryId" name="staticFactoryName" class="Factory.StaticFactory" factory-method="getStaticFactory" />

    <!--
        非静态工厂类获取对象Bean
        非静态工厂需要配置2个Bean
        factory-method： 获取对象的方法

        第一个bean（unStaticFactoryBaseId）：
                      将非静态工厂注入到Spring的容器中

        第二个bean（unStaticFactoryId）：
                  调用（引用）第一个非静态工厂类
                  factory-bean： 配置的静态工厂的类的BeanId
    -->
    <bean id="unStaticFactoryBaseId" name="unStaticFactoryName" class="Factory.UnStaticFactory" />
    <bean id="unStaticFactoryId" factory-bean="unStaticFactoryBaseId" factory-method="getFactoryUser" />

    <!--
        通过有参构造获取对象
    -->
    <bean id="userConstructorId" name="userConstructorName" class="domain.User">
        <constructor-arg name="age" value="18"/>
        <constructor-arg name="sex" value="男"/>
        <constructor-arg name="name" value="轩轩"/>
    </bean>

    <!--
        通过set方法注入对象的属性值
    -->
    <bean id="userSetId" name="userSetName" class="domain.User">
        <property name="sex" value="男"/>
        <property name="name" value="轩轩"/>
        <property name="age" value="18"/>
    </bean>

</beans>